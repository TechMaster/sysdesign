[{"id":0,"href":"/chapter01/fontawesome/","title":"1.1 Font Awesome","parent":"Chapter 01","content":" Demo Font Awesome Look good in some case\nperson cane "},{"id":1,"href":"/chapter01/foo/","title":"1.2 Foo","parent":"Chapter 01","content":" Lời mở đầu cho một câu chuyện buồn\nShow Hi modal dialog Left Content Dolor sit, sumo unique argument um no \u0026hellip; Mid Content Dolor sit, sumo unique argument um no \u0026hellip; Right Content Dolor sit, sumo unique argument um no \u0026hellip; Level 1 Level 1.1 Level 1.2 Level 1.2.1 Level 2 Level 1 Dolor sit, sumo unique argument um no. Gracie nominal id xiv. Romanesque acclimates investiture. Ornateness bland it ex enc, est yeti am bongo detract re. Pro ad prompts feud gait, quid exercise emeritus bis e. In pro quints consequent, denim fastidious copious quo ad. Stet probates in duo.\nLevel 1.1 Giật vào một cấp độ\nLevel 1.2 Nhìn cũng choáng phết\nLevel 1.2.1 Nhìn cũng hay. Geek Doc tốt đấy Cập nhật chút xíu\nLevel 2 Amalia id per in minimum facility, quid facet modifier ea ma. Ill um select ma ad, en ferric patine sentient vim. Per expendable foreordained interpretations cu, maxim sole pertinacity in ram.\nprop1 required string Dummy description of the prop1 string property. Default: none prop2 optional int tag1 tag2 Another description for the integer property called prop2. Default: 10 prop3 optional bool A bool property with a complex multiline description and embedded Markdown:\nList item 1 List item 2 More description how to use this property.\nDefault: false "},{"id":2,"href":"/chapter01/mermaid/","title":"1.3 Mermaid","parent":"Chapter 01","content":" sequenceDiagram Alice-\u003e\u003eBob: Hello Bob, how are you? alt is sick Bob-\u003e\u003eAlice: Not so good :( else is well Bob-\u003e\u003eAlice: Feeling fresh like a daisy end opt Extra response Bob-\u003e\u003eAlice: Thanks for asking end flowchart LR id1[(Database)] id2([This is the text in the box]) id3{{This is the text in the box}} id1--\u003e|connect|id2 id2--\u003e|query|id3 id3--\u003eid1 flowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra class Animal{ +int age +String gender +isMammal() +mate() } class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string allowedDriver FK \"The license of the allowed driver\" string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string driversLicense PK \"The license #\" string firstName string lastName int age } "},{"id":3,"href":"/chapter02/02_1/","title":"2.1 Sự trỗi dậy của bầy sói","parent":"Chapter 02","content":"Sói luôn đi săn theo đàn. Nhìn rất là cool Golang code is beautiful\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // GetTitleFunc returns a func that can be used to transform a string to // title case. // // The supported styles are // // - \u0026#34;Go\u0026#34; (strings.Title) // - \u0026#34;AP\u0026#34; (see https://www.apstylebook.com/) // - \u0026#34;Chicago\u0026#34; (see https://www.chicagomanualofstyle.org/home.html) // // If an unknown or empty style is provided, AP style is what you get. func GetTitleFunc(style string) func(s string) string { switch strings.ToLower(style) { case \u0026#34;go\u0026#34;: return strings.Title case \u0026#34;chicago\u0026#34;: return transform.NewTitleConverter(transform.ChicagoStyle) default: return transform.NewTitleConverter(transform.APStyle) } } "},{"id":4,"href":"/chapter02/02_2/","title":"2.2 Sự im lặng của bầy cừu","parent":"Chapter 02","content":"Nhúng YouTube vào Hugo\n"},{"id":5,"href":"/chapter01/","title":"Chapter 01","parent":"Trang chủ","content":"Không hiểu sao không chạy\n"},{"id":6,"href":"/chapter02/","title":"Chapter 02","parent":"Trang chủ","content":"Chương 2 bắt đầu từ đây. Có điều gì hay ho các bạn kể tôi nghe\n"},{"id":7,"href":"/chapter03/","title":"Chapter 03","parent":"Trang chủ","content":"Chương 3 bắt đầu từ đây\n"},{"id":8,"href":"/tags/first-tag/","title":"first-tag","parent":"Tags","content":""},{"id":9,"href":"/tags/love/","title":"love","parent":"Tags","content":""},{"id":10,"href":"/tags/sex/","title":"sex","parent":"Tags","content":""},{"id":11,"href":"/tags/tag/","title":"tag","parent":"Tags","content":""},{"id":12,"href":"/tags/","title":"Tags","parent":"Trang chủ","content":""},{"id":13,"href":"/tags/third-tag/","title":"third-tag","parent":"Tags","content":""},{"id":14,"href":"/chapter01/sub/","title":"1.4 Sub Level","parent":"Chapter 01","content":"Có thể hiển thị thông tin ở sub level\nJava // Java program to count number of nodes in a linked list /* Linked list Node*/ class Node { int data; Node next; Node(int d) { data = d; next = null; } } // Linked List class class LinkedList { Node head; // head of list /* Inserts a new Node at front of the list. */ public void push(int new_data) { /* 1 \u0026amp; 2: Allocate the Node \u0026amp; Put in the data*/ Node new_node = new Node(new_data); /* 3. Make next of new Node as head */ new_node.next = head; /* 4. Move the head to point to new Node */ head = new_node; } /* Returns count of nodes in linked list */ public int getCount() { Node temp = head; int count = 0; while (temp != null) { count++; temp = temp.next; } return count; } /* Driver program to test above functions. Ideally this function should be in a separate user class. It is kept here to keep code compact */ public static void main(String[] args) { /* Start with the empty list */ LinkedList llist = new LinkedList(); llist.push(1); llist.push(3); llist.push(1); llist.push(2); llist.push(1); System.out.println(\u0026#34;Count of nodes is \u0026#34; + llist.getCount()); } } Python # A complete working Python program to find length of a # Linked List iteratively # Node class class Node: # Function to initialise the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class contains a Node object class LinkedList: # Function to initialize head def __init__(self): self.head = None # This function is in LinkedList class. It inserts # a new node at the beginning of Linked List. def push(self, new_data): # 1 \u0026amp; 2: Allocate the Node \u0026amp; # Put in the data new_node = Node(new_data) # 3. Make next of new Node as head new_node.next = self.head # 4. Move the head to point to new Node self.head = new_node # This function counts number of nodes in Linked List # iteratively, given \u0026#39;node\u0026#39; as starting node. def getCount(self): temp = self.head # Initialise temp count = 0 # Initialise count # Loop while end of linked list is not reached while (temp): count += 1 temp = temp.next return count # Code execution starts here if __name__==\u0026#39;__main__\u0026#39;: llist = LinkedList() llist.push(1) llist.push(3) llist.push(1) llist.push(2) llist.push(1) print (\u0026#34;Count of nodes is :\u0026#34;,llist.getCount()) C\u0026#43;\u0026#43; Windows Content "},{"id":15,"href":"/chapter01/sub/another_level/","title":"1.4.1 level doc","parent":"1.4 Sub Level","content":"3rd level document\n"},{"id":16,"href":"/chapter03/03_2/","title":"3.2 Nhàn têng","parent":"Chapter 03","content":"Sắp xếp theo title của file các bạn nhé\nCustom Label ... Java 1 2 3 4 5 6 package sourcecode; public class Demo { public static void main() { System.out.println(\u0026#34;Hello World\u0026#34;); } } Golang 1 2 3 4 5 6 7 8 9 10 11 package main import \u0026#34;fmt\u0026#34; func main() { sum := 1 for sum \u0026lt; 1000 { sum += sum } fmt.Println(sum) } "},{"id":17,"href":"/tags/sport/","title":"sport","parent":"Tags","content":""},{"id":18,"href":"/","title":"Trang chủ","parent":"","content":"Đây là trang chủ các bạn chú ý đón xem. Tôi có những người bạn.\nTables Are Cool col 1 is left-aligned $1600 col 2 is centered $12 col 3 is right-aligned $1 "}]